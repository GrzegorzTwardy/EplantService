version: '3.8'

services:
  userservice:
    image: userservice:latest
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eshop-network
    restart: unless-stopped
  
  eshopservice:
    image: eshopservice:latest
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eshop-network
    restart: unless-stopped

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file: dockerconfig/postgres/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - eshop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - eshop-network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    volumes:
      - redis:/data

  pg-admin:
    image:
      dpage/pgadmin4:7.6
    env_file: dockerconfig/pgadmin/pg-admin.env
    restart: always
    networks:
      - eshop-network
    ports:
      - "8083:80"
    volumes:
      - pg-admin:/var/lib/pgadmin


networks:
  eshop-network:
    driver: bridge

volumes:
  postgres:
    external: false
  pg-admin:
    external: false
  redis:
    external: false